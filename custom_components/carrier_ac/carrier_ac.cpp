#include "carrier_ac.h"
#include "esphome/core/log.h"
#include <vector> // Required for sending raw codes

namespace esphome {
namespace carrier_ac {

static const char *const TAG = "carrier_ac.climate";

// ======================================================================
// ===                PASTE YOUR "CODE BOOK" HERE                     ===
// ======================================================================
// IMPORTANT: You MUST define all the variables you use below.
// The placeholders below WILL cause errors until you replace them.

const uint32_t IR_FREQUENCY = 38000; // 38kHz. Change if yours is different.

static const int32_t CODE_OFF[] = {9247, -4376, 659, -465, 661, -464, 662, -1565, 660, -466, 660, -465, 687, -437, 662, -463, 663, -464, 690, -437, 660, -1564, 690, -436, 690, -435, 691, -1535, 662, -463, 690, -1537, 687, -439, 660, -464, 691, -436, 690, -435, 690, -436, 661, -464, 661, -466, 660, -464, 690, -438, 688, -437, 688, -437, 690, -436, 660, -466, 636, -490, 660, -464, 661, -465, 661, -466, 689, -437, 659, -467, 688, -437, 660, -466, 660, -466, 660, -466, 686, -438, 661, -465, 689, -1538, 687, -1538, 660, -1564, 689, -1539, 685, -1538, 689, -438, 688, -437, 660, -1566, 659, -466, 660, -466, 688, -437, 688, -439, 659, -464, 662, -1566, 686, -1541, 658, -1566, 659, -464, 662, -465, 688, -1538, 660, -1564, 688, -1539, 660, -1564, 661, -465, 688, -1538, 660};
static const int32_t CODE_COOL_22_AUTO[] = {9253, -4371, 666, -460, 666, -460, 666, -1560, 666, -460, 666, -1560, 665, -461, 666, -462, 664, -460, 666, -460, 666, -1560, 694, -432, 665, -461, 665, -462, 664, -1564, 662, -1561, 692, -1535, 664, -463, 663, -462, 664, -462, 663, -461, 666, -462, 663, -464, 663, -462, 664, -462, 663, -462, 665, -462, 663, -463, 664, -462, 663, -462, 664, -464, 662, -463, 663, -464, 662, -464, 663, -463, 662, -462, 664, -463, 663, -463, 664, -460, 665, -463, 663, -464, 662, -1562, 663, -464, 690, -1537, 690, -433, 664, -1564, 662, -463, 663, -464, 663, -1561, 664, -462, 664, -464, 662, -463, 663, -463, 663, -462, 664, -1563, 664, -1561, 664, -1562, 664, -462, 664, -462, 664, -1562, 664, -1563, 663, -1564, 661, -1564, 662, -463, 663, -1568, 658};
static const int32_t CODE_COOL_23_AUTO[] = {9278, -4348, 690, -437, 686, -439, 690, -1536, 662, -463, 663, -1563, 663, -466, 660, -465, 663, -461, 664, -462, 665, -1561, 639, -488, 663, -463, 688, -1537, 666, -461, 664, -462, 689, -436, 689, -438, 686, -441, 662, -464, 637, -488, 662, -468, 659, -463, 662, -465, 687, -441, 685, -438, 662, -464, 637, -492, 635, -489, 637, -487, 664, -465, 662, -462, 663, -464, 662, -466, 659, -464, 637, -489, 661, -468, 634, -490, 661, -464, 688, -441, 634, -490, 662, -1564, 661, -465, 661, -465, 687, -1537, 663, -1564, 663, -464, 636, -490, 661, -1565, 684, -441, 661, -464, 638, -489, 662, -464, 639, -488, 635, -1591, 636, -1588, 663, -1565, 661, -465, 636, -489, 661, -1566, 663, -1563, 636, -1588, 638, -1590, 636, -490, 660, -1566, 660};
static const int32_t CODE_COOL_24_AUTO[] = {9254, -4373, 664, -462, 664, -463, 667, -1557, 665, -462, 664, -1563, 664, -462, 692, -434, 693, -434, 663, -462, 664, -1561, 665, -462, 664, -462, 664, -1562, 664, -463, 663, -463, 662, -1562, 665, -460, 666, -462, 664, -463, 691, -435, 662, -461, 666, -460, 666, -460, 666, -461, 664, -462, 664, -463, 690, -437, 663, -462, 664, -462, 664, -461, 665, -461, 665, -461, 665, -462, 664, -462, 664, -463, 690, -435, 664, -463, 663, -464, 663, -460, 665, -461, 665, -1562, 667, -460, 664, -461, 665, -462, 664, -1564, 662, -462, 664, -463, 663, -1563, 691, -434, 664, -461, 668, -460, 663, -464, 661, -462, 664, -1563, 664, -1562, 664, -1564, 662, -463, 663, -461, 665, -1563, 663, -1562, 664, -1563, 663, -1562, 664, -462, 664, -1563, 663};
static const int32_t CODE_COOL_25_AUTO[] = {9278, -4346, 689, -438, 688, -437, 661, -1565, 661, -465, 661, -1566, 690, -434, 664, -464, 687, -439, 661, -464, 661, -1565, 690, -435, 691, -437, 661, -1564, 661, -464, 691, -1536, 662, -462, 691, -435, 691, -435, 663, -465, 661, -465, 688, -439, 689, -435, 662, -464, 661, -465, 662, -464, 689, -437, 662, -464, 662, -465, 688, -438, 689, -438, 660, -464, 662, -464, 662, -465, 661, -463, 663, -464, 689, -441, 658, -466, 688, -438, 688, -441, 657, -464, 662, -465, 661, -1566, 660, -1565, 662, -1563, 663, -1563, 663, -464, 661, -466, 660, -1566, 660, -466, 660, -467, 659, -464, 662, -465, 689, -437, 661, -1567, 659, -1565, 663, -1563, 661, -465, 689, -438, 660, -1566, 660, -1567, 659, -1565, 661, -1566, 660, -466, 660, -1566, 660};
static const int32_t CODE_COOL_26_AUTO[] = {9252, -4372, 665, -462, 664, -462, 664, -1562, 664, -461, 665, -1562, 664, -462, 664, -460, 694, -434, 693, -433, 664, -1561, 665, -461, 665, -463, 663, -1562, 664, -460, 666, -1562, 664, -1562, 664, -463, 692, -432, 665, -461, 665, -461, 665, -462, 664, -461, 665, -461, 665, -461, 693, -434, 664, -463, 692, -431, 666, -462, 664, -462, 664, -462, 664, -461, 665, -465, 662, -460, 693, -435, 663, -467, 659, -460, 666, -462, 664, -461, 665, -463, 663, -462, 664, -463, 663, -1562, 664, -1563, 663, -462, 664, -1562, 691, -439, 660, -462, 664, -1563, 663, -464, 662, -461, 665, -462, 663, -462, 665, -464, 662, -1562, 666, -1562, 663, -1562, 664, -466, 659, -463, 663, -1563, 663, -1562, 664, -1563, 663, -1563, 663, -462, 664, -1563, 663};
static const int32_t CODE_COOL_27_AUTO[] = {9253, -4374, 663, -461, 665, -460, 666, -1561, 665, -463, 663, -1560, 666, -463, 663, -462, 664, -463, 663, -460, 666, -1561, 692, -434, 692, -434, 694, -1532, 665, -1560, 666, -461, 665, -462, 664, -460, 666, -460, 665, -461, 665, -462, 665, -462, 695, -430, 665, -460, 665, -462, 665, -461, 665, -460, 666, -460, 666, -460, 666, -460, 665, -464, 689, -436, 664, -461, 665, -461, 665, -461, 664, -462, 664, -462, 664, -461, 665, -461, 665, -464, 690, -435, 663, -461, 666, -1563, 663, -461, 691, -1536, 663, -1562, 664, -461, 665, -463, 664, -1561, 665, -463, 663, -463, 662, -464, 662, -463, 663, -463, 663, -1563, 664, -1561, 665, -1562, 663, -462, 665, -461, 664, -1564, 662, -1563, 663, -1562, 664, -1564, 664, -460, 664, -1562, 664};
static const int32_t CODE_COOL_22_LOW[] = {9287, -4348, 665, -463, 663, -463, 694, -1532, 665, -462, 665, -1563, 664, -463, 664, -463, 693, -433, 668, -458, 666, -1564, 689, -1538, 664, -1562, 665, -466, 689, -1536, 692, -1533, 666, -1562, 666, -460, 667, -461, 665, -463, 695, -432, 663, -462, 666, -461, 666, -461, 665, -467, 660, -463, 664, -463, 663, -463, 665, -462, 665, -461, 665, -467, 688, -433, 665, -465, 663, -461, 666, -461, 665, -462, 691, -436, 665, -462, 665, -464, 662, -465, 662, -463, 664, -462, 665, -1562, 666, -1564, 668, -1558, 665, -1565, 690, -440, 659, -462, 666, -1563, 664, -464, 663, -462, 669, -459, 664, -464, 662, -463, 665, -463, 663, -465, 662, -464, 664, -463, 662, -463, 664, -464, 664, -461, 665, -462, 665, -1565, 662, -1564, 664, -1564, 664};
static const int32_t CODE_COOL_23_LOW[] = {9286, -4351, 660, -466, 661, -467, 659, -1569, 659, -466, 689, -1538, 689, -439, 688, -438, 690, -438, 688, -439, 689, -1539, 687, -1539, 661, -1568, 661, -1565, 661, -467, 660, -465, 688, -441, 687, -439, 660, -468, 659, -468, 659, -467, 660, -467, 688, -439, 687, -440, 688, -439, 659, -467, 659, -468, 687, -439, 689, -438, 688, -438, 689, -438, 661, -467, 659, -467, 661, -466, 688, -440, 660, -466, 660, -467, 660, -468, 659, -467, 660, -467, 688, -439, 687, -440, 659, -1569, 660, -1567, 661, -467, 659, -1569, 685, -440, 687, -444, 684, -1541, 659, -465, 689, -439, 660, -467, 659, -467, 664, -465, 687, -439, 687, -440, 659, -466, 661, -467, 660, -467, 661, -465, 661, -465, 662, -465, 688, -1546, 654, -1569, 687, -1541, 659};
static const int32_t CODE_COOL_24_LOW[] = {9259, -4377, 663, -467, 660, -464, 693, -1533, 664, -462, 692, -1538, 662, -465, 662, -463, 664, -462, 665, -462, 665, -1563, 692, -1535, 665, -1565, 662, -1564, 664, -464, 691, -434, 669, -1560, 663, -463, 664, -462, 665, -461, 692, -437, 663, -464, 690, -437, 663, -462, 665, -461, 693, -436, 663, -465, 662, -464, 663, -464, 662, -462, 665, -463, 665, -463, 663, -464, 691, -436, 663, -461, 666, -462, 665, -462, 665, -461, 665, -464, 690, -437, 662, -464, 663, -463, 664, -1565, 663, -463, 664, -1565, 662, -1566, 663, -463, 663, -463, 664, -1566, 661, -466, 662, -465, 662, -464, 663, -463, 663, -465, 690, -436, 663, -463, 663, -464, 664, -462, 664, -462, 665, -463, 664, -463, 663, -464, 663, -1566, 662, -1564, 663, -1565, 664};
static const int32_t CODE_COOL_25_LOW[] = {9256, -4377, 663, -463, 664, -465, 662, -1565, 692, -436, 662, -1565, 663, -463, 692, -438, 660, -465, 691, -435, 662, -1566, 662, -1566, 692, -1536, 690, -1536, 662, -465, 663, -1566, 661, -467, 688, -435, 691, -436, 690, -437, 663, -465, 662, -465, 661, -467, 660, -465, 662, -464, 662, -468, 660, -465, 662, -465, 661, -466, 661, -465, 662, -465, 690, -438, 660, -466, 661, -466, 661, -464, 663, -465, 662, -464, 663, -463, 663, -466, 661, -464, 663, -465, 662, -465, 662, -1566, 661, -466, 661, -466, 661, -1566, 662, -467, 688, -437, 661, -1566, 690, -436, 691, -436, 663, -464, 665, -463, 661, -464, 689, -440, 663, -463, 661, -464, 663, -466, 660, -466, 661, -467, 660, -467, 660, -465, 662, -1567, 660, -1567, 661, -1568, 660};
static const int32_t CODE_COOL_26_LOW[] = {9255, -4380, 689, -437, 662, -463, 663, -1565, 663, -464, 663, -1566, 690, -436, 692, -436, 661, -465, 690, -438, 690, -1539, 688, -1563, 636, -1565, 693, -1535, 663, -468, 658, -1565, 662, -1566, 691, -436, 690, -437, 689, -437, 691, -437, 688, -439, 689, -438, 660, -467, 660, -465, 663, -465, 661, -466, 660, -467, 660, -467, 661, -464, 662, -465, 662, -465, 690, -438, 689, -438, 661, -465, 691, -435, 692, -435, 662, -467, 660, -467, 692, -434, 661, -467, 659, -465, 662, -466, 690, -1538, 661, -1568, 660, -1566, 637, -491, 660, -465, 662, -1568, 660, -465, 661, -467, 660, -466, 688, -440, 688, -438, 660, -465, 662, -465, 662, -465, 662, -466, 660, -466, 690, -437, 661, -467, 660, -466, 661, -1567, 661, -1567, 660, -1567, 662};
static const int32_t CODE_COOL_27_LOW[] = {9257, -4378, 663, -464, 663, -464, 663, -1565, 691, -435, 692, -1537, 688, -438, 663, -464, 688, -440, 661, -465, 691, -1537, 662, -1565, 689, -1538, 662, -1565, 663, -1566, 662, -464, 689, -437, 664, -464, 663, -462, 693, -436, 661, -466, 661, -464, 663, -464, 663, -463, 664, -465, 661, -466, 662, -465, 661, -466, 661, -465, 662, -465, 690, -438, 661, -464, 662, -466, 662, -463, 664, -463, 663, -464, 664, -463, 663, -464, 663, -463, 664, -464, 662, -466, 662, -464, 662, -466, 661, -1566, 662, -464, 662, -1568, 660, -464, 663, -464, 663, -1566, 662, -464, 694, -433, 662, -467, 660, -465, 692, -435, 661, -467, 661, -463, 663, -466, 661, -467, 660, -466, 661, -466, 661, -467, 660, -463, 664, -1564, 663, -1564, 692, -1539, 661};
static const int32_t CODE_COOL_22_MEDIUM[] = {9290, -4346, 691, -437, 661, -465, 691, -1537, 690, -436, 662, -1565, 689, -438, 663, -464, 689, -437, 691, -438, 687, -1539, 689, -1538, 695, -433, 661, -467, 659, -1566, 691, -1536, 663, -1565, 663, -464, 662, -466, 661, -465, 662, -465, 662, -465, 690, -437, 662, -465, 689, -439, 689, -435, 663, -465, 691, -437, 660, -466, 692, -434, 662, -467, 660, -464, 663, -464, 663, -465, 690, -437, 661, -466, 688, -440, 688, -437, 693, -433, 691, -439, 658, -465, 662, -1568, 663, -463, 661, -465, 690, -437, 690, -1539, 661, -464, 662, -467, 689, -1539, 688, -437, 662, -466, 660, -466, 688, -438, 662, -465, 688, -438, 662, -464, 663, -1566, 661, -466, 661, -466, 691, -434, 663, -467, 660, -464, 693, -1537, 660, -1571, 686, -437, 661};
static const int32_t CODE_COOL_23_MEDIUM[] = {9282, -4351, 662, -464, 663, -466, 689, -1537, 662, -465, 662, -1565, 691, -437, 661, -465, 690, -438, 660, -464, 664, -1565, 691, -1536, 663, -467, 660, -1564, 663, -465, 665, -461, 663, -465, 689, -438, 661, -464, 690, -438, 688, -439, 689, -437, 691, -437, 688, -439, 689, -436, 662, -465, 662, -464, 662, -467, 660, -467, 660, -467, 660, -466, 688, -439, 661, -465, 690, -437, 661, -465, 662, -465, 688, -439, 662, -464, 662, -467, 660, -466, 661, -470, 657, -464, 663, -1565, 662, -1568, 660, -1566, 663, -1566, 688, -437, 661, -466, 661, -1568, 660, -465, 662, -465, 662, -466, 687, -438, 662, -466, 661, -465, 662, -465, 688, -1540, 661, -464, 663, -464, 662, -465, 662, -466, 660, -467, 661, -1566, 661, -1567, 660, -468, 659};
static const int32_t CODE_COOL_24_MEDIUM[] = {9285, -4350, 687, -439, 690, -436, 662, -1567, 660, -464, 664, -1565, 691, -436, 662, -465, 691, -436, 661, -465, 691, -1537, 690, -1537, 661, -465, 690, -1540, 689, -437, 661, -464, 692, -1537, 690, -437, 689, -437, 690, -437, 661, -467, 659, -467, 660, -467, 660, -467, 660, -465, 663, -464, 689, -438, 690, -437, 637, -490, 690, -435, 692, -435, 690, -437, 662, -467, 689, -437, 661, -465, 662, -464, 662, -465, 661, -467, 661, -466, 661, -466, 660, -466, 689, -437, 688, -1539, 663, -1567, 688, -437, 662, -1567, 661, -464, 690, -438, 688, -1539, 689, -439, 692, -433, 661, -467, 660, -466, 661, -466, 661, -467, 688, -438, 689, -1539, 688, -438, 689, -437, 661, -465, 688, -439, 662, -465, 662, -1565, 662, -1566, 662, -466, 661};
static const int32_t CODE_COOL_25_MEDIUM[] = {9256, -4377, 663, -464, 663, -466, 661, -1565, 691, -436, 662, -1565, 691, -442, 656, -465, 693, -434, 690, -439, 688, -1538, 661, -1565, 663, -464, 662, -1566, 662, -465, 690, -1538, 661, -466, 661, -465, 691, -437, 689, -437, 661, -466, 661, -464, 663, -465, 691, -436, 691, -436, 690, -436, 661, -468, 660, -464, 663, -465, 690, -438, 660, -465, 661, -467, 661, -466, 661, -465, 662, -464, 689, -438, 661, -465, 663, -464, 689, -439, 690, -437, 688, -438, 661, -467, 660, -1567, 689, -438, 661, -1567, 661, -1567, 689, -437, 661, -467, 661, -1565, 690, -441, 659, -464, 663, -465, 689, -438, 660, -467, 689, -437, 661, -466, 661, -1566, 689, -441, 658, -465, 688, -440, 660, -468, 659, -465, 692, -1536, 663, -1566, 660, -465, 661};
static const int32_t CODE_COOL_26_MEDIUM[] = {9256, -4380, 690, -434, 663, -464, 663, -1564, 692, -435, 691, -1537, 689, -438, 662, -465, 690, -438, 690, -435, 662, -1567, 662, -1563, 692, -436, 662, -1566, 689, -438, 690, -1536, 662, -1566, 691, -435, 691, -438, 661, -465, 661, -468, 659, -465, 693, -435, 689, -438, 660, -465, 662, -466, 661, -465, 661, -464, 663, -467, 690, -435, 662, -464, 663, -464, 662, -465, 691, -436, 662, -465, 661, -466, 661, -465, 689, -438, 689, -439, 636, -490, 661, -464, 662, -468, 685, -1541, 661, -465, 661, -466, 690, -1537, 688, -439, 690, -437, 689, -1541, 685, -438, 692, -434, 691, -439, 659, -465, 663, -465, 689, -440, 658, -466, 661, -1565, 663, -464, 689, -437, 663, -465, 661, -466, 689, -439, 688, -1538, 661, -1567, 661, -466, 660};
static const int32_t CODE_COOL_27_MEDIUM[] = {9256, -4378, 663, -463, 692, -437, 661, -1565, 690, -438, 661, -1565, 663, -465, 690, -437, 690, -436, 662, -464, 690, -1539, 665, -1563, 689, -436, 661, -1567, 661, -1567, 661, -466, 663, -464, 661, -466, 687, -439, 662, -464, 690, -437, 661, -466, 690, -436, 690, -436, 662, -466, 661, -465, 690, -437, 662, -464, 663, -464, 662, -466, 689, -438, 690, -437, 661, -464, 663, -464, 662, -465, 662, -464, 662, -467, 660, -465, 662, -465, 662, -465, 680, -446, 662, -466, 661, -467, 660, -1566, 661, -1567, 689, -1539, 661, -464, 662, -466, 660, -1567, 688, -438, 662, -464, 662, -465, 662, -467, 688, -438, 688, -438, 661, -467, 660, -1565, 662, -466, 661, -467, 660, -465, 691, -437, 660, -467, 688, -1539, 692, -1536, 662, -463, 662};
static const int32_t CODE_COOL_22_HIGH[] = {9233, -4400, 639, -490, 690, -436, 687, -1541, 662, -464, 687, -1539, 689, -441, 637, -489, 685, -442, 662, -463, 664, -1565, 637, -490, 687, -1539, 663, -463, 664, -1565, 663, -1565, 637, -1590, 662, -463, 663, -464, 665, -463, 686, -441, 638, -492, 658, -466, 661, -466, 661, -467, 660, -464, 638, -489, 639, -487, 664, -464, 688, -439, 662, -464, 638, -489, 637, -490, 637, -490, 661, -465, 638, -490, 637, -489, 663, -463, 663, -464, 663, -463, 638, -489, 638, -1591, 663, -463, 638, -489, 662, -1566, 661, -1565, 639, -489, 637, -490, 638, -1589, 662, -466, 662, -464, 689, -439, 636, -491, 683, -443, 637, -491, 636, -1591, 660, -467, 662, -464, 688, -440, 636, -490, 661, -464, 638, -491, 660, -1566, 663, -464, 638, -1590, 663};
static const int32_t CODE_COOL_23_HIGH[] = {9283, -4351, 691, -437, 685, -441, 688, -1540, 661, -468, 659, -1566, 637, -490, 638, -487, 664, -464, 663, -463, 639, -1589, 638, -489, 638, -1590, 689, -1538, 689, -442, 686, -437, 662, -465, 689, -439, 661, -465, 663, -463, 639, -490, 636, -490, 637, -488, 663, -464, 665, -462, 639, -489, 637, -490, 637, -490, 637, -490, 687, -439, 663, -467, 682, -442, 637, -489, 638, -490, 662, -463, 639, -488, 663, -464, 638, -489, 638, -489, 662, -464, 664, -465, 636, -1591, 638, -488, 638, -489, 662, -464, 638, -1592, 638, -489, 636, -489, 663, -1566, 662, -466, 661, -467, 659, -467, 661, -464, 638, -492, 634, -490, 661, -1567, 637, -491, 661, -466, 661, -466, 661, -466, 661, -465, 637, -489, 663, -1565, 661, -467, 637, -1595, 633};
static const int32_t CODE_COOL_24_HIGH[] = {9258, -4377, 662, -464, 664, -463, 664, -1564, 691, -437, 689, -1538, 690, -437, 688, -439, 691, -435, 662, -464, 663, -1566, 662, -464, 663, -1565, 662, -1566, 661, -463, 664, -464, 663, -1565, 663, -463, 664, -464, 663, -462, 640, -489, 690, -435, 663, -465, 663, -468, 659, -463, 662, -466, 637, -489, 638, -489, 662, -465, 690, -441, 686, -437, 637, -489, 662, -465, 638, -489, 692, -434, 690, -438, 688, -437, 693, -436, 662, -465, 662, -464, 692, -436, 636, -489, 662, -1565, 690, -1539, 662, -1565, 689, -1538, 663, -465, 661, -464, 638, -1591, 661, -466, 662, -464, 661, -465, 663, -464, 688, -440, 688, -439, 688, -1540, 662, -465, 661, -465, 688, -438, 665, -462, 662, -466, 636, -491, 636, -1591, 662, -464, 663, -1566, 661};
static const int32_t CODE_COOL_25_HIGH[] = {9286, -4349, 639, -489, 690, -436, 691, -1538, 662, -463, 692, -1535, 689, -440, 691, -436, 690, -437, 662, -463, 690, -1539, 661, -465, 689, -1538, 663, -1565, 638, -489, 689, -1540, 637, -489, 661, -466, 690, -437, 689, -438, 637, -489, 662, -464, 639, -489, 690, -436, 690, -437, 693, -434, 638, -490, 662, -463, 663, -465, 689, -438, 637, -488, 638, -490, 662, -464, 663, -464, 662, -466, 688, -438, 661, -464, 663, -465, 689, -439, 686, -441, 688, -438, 661, -466, 637, -1589, 663, -1567, 637, -493, 658, -1567, 661, -465, 638, -490, 660, -1566, 638, -489, 664, -463, 689, -439, 636, -488, 639, -490, 660, -467, 661, -1566, 688, -439, 637, -491, 661, -465, 637, -488, 662, -466, 662, -464, 638, -1591, 637, -490, 637, -1593, 659};
static const int32_t CODE_COOL_26_HIGH[] = {9258, -4378, 690, -439, 688, -435, 694, -1534, 691, -437, 689, -1537, 691, -438, 689, -437, 661, -465, 663, -465, 662, -1565, 662, -463, 664, -1564, 663, -1566, 662, -465, 662, -1565, 638, -1591, 690, -435, 662, -465, 664, -467, 659, -464, 687, -441, 637, -493, 634, -489, 638, -489, 690, -441, 684, -439, 637, -489, 661, -465, 639, -490, 688, -437, 689, -438, 689, -437, 691, -437, 663, -463, 663, -465, 690, -437, 661, -465, 638, -490, 661, -466, 661, -466, 660, -466, 662, -1566, 688, -438, 690, -1539, 661, -1565, 662, -466, 661, -465, 662, -1566, 689, -437, 662, -463, 664, -463, 663, -465, 662, -464, 663, -464, 663, -1565, 662, -467, 661, -462, 665, -463, 664, -463, 663, -464, 663, -463, 664, -1565, 663, -464, 663, -1565, 662};
static const int32_t CODE_COOL_27_HIGH[] = {9287, -4348, 642, -486, 638, -488, 638, -1591, 637, -489, 690, -1538, 660, -467, 661, -465, 690, -437, 687, -440, 638, -1589, 690, -436, 642, -1585, 687, -1541, 691, -1537, 664, -464, 689, -438, 689, -437, 638, -490, 661, -465, 662, -465, 662, -464, 639, -490, 636, -490, 661, -464, 663, -464, 663, -463, 639, -489, 638, -489, 638, -489, 637, -490, 688, -439, 689, -438, 637, -488, 639, -488, 638, -489, 664, -462, 664, -463, 664, -463, 638, -490, 662, -464, 663, -465, 685, -1546, 634, -490, 662, -463, 664, -1565, 661, -466, 637, -489, 637, -1591, 637, -490, 637, -490, 661, -465, 660, -467, 661, -466, 662, -463, 642, -1588, 636, -490, 661, -465, 638, -490, 661, -467, 660, -466, 661, -466, 661, -1566, 637, -490, 662, -1566, 661};
static const int32_t CODE_FAN_LOW[] = {9284, -4349, 661, -466, 661, -465, 691, -1536, 662, -467, 686, -1540, 691, -436, 661, -467, 690, -436, 660, -466, 661, -466, 688, -1541, 659, -1568, 687, -1540, 661, -464, 662, -466, 688, -1540, 689, -438, 660, -466, 660, -467, 660, -466, 688, -438, 661, -466, 662, -466, 689, -438, 688, -439, 688, -437, 690, -437, 690, -437, 690, -437, 660, -465, 662, -466, 661, -468, 686, -440, 688, -438, 660, -468, 685, -440, 661, -467, 660, -467, 687, -439, 689, -438, 659, -1569, 688, -438, 660, -465, 688, -1541, 660, -1568, 635, -491, 660, -465, 688, -1542, 660, -465, 688, -438, 689, -438, 689, -438, 663, -464, 661, -465, 688, -441, 660, -466, 688, -439, 659, -467, 661, -466, 660, -467, 660, -466, 637, -1592, 687, -1540, 660, -1568, 660};
static const int32_t CODE_FAN_MEDIUM[] = {9257, -4383, 658, -464, 692, -436, 691, -1536, 661, -464, 662, -1566, 662, -465, 663, -463, 663, -464, 663, -464, 690, -438, 661, -1567, 661, -467, 686, -1540, 661, -466, 690, -437, 661, -1566, 661, -467, 689, -436, 662, -466, 661, -466, 660, -466, 661, -464, 663, -465, 662, -464, 663, -465, 692, -434, 662, -466, 689, -436, 691, -436, 689, -442, 657, -467, 690, -437, 661, -466, 660, -465, 662, -464, 662, -467, 660, -466, 661, -466, 660, -467, 689, -437, 661, -1566, 662, -465, 689, -1538, 662, -467, 688, -1537, 690, -441, 658, -466, 660, -1568, 688, -437, 661, -464, 663, -464, 666, -461, 662, -465, 661, -467, 661, -464, 663, -1565, 662, -466, 688, -437, 690, -437, 690, -437, 661, -467, 660, -1569, 659, -1568, 687, -439, 660};
static const int32_t CODE_FAN_HIGH[] = {9284, -4351, 689, -437, 661, -465, 661, -1569, 660, -465, 688, -1539, 689, -439, 687, -438, 688, -439, 690, -438, 689, -438, 688, -439, 660, -1571, 685, -1563, 637, -464, 661, -467, 661, -1571, 683, -440, 660, -465, 689, -438, 688, -438, 690, -437, 661, -467, 661, -465, 689, -440, 688, -438, 688, -438, 660, -467, 660, -467, 660, -466, 661, -465, 637, -491, 636, -490, 661, -467, 687, -439, 661, -466, 689, -437, 689, -438, 689, -438, 660, -467, 688, -439, 685, -1543, 688, -441, 684, -1541, 660, -1567, 659, -1568, 661, -467, 687, -440, 688, -1540, 659, -467, 661, -466, 660, -466, 689, -438, 660, -467, 687, -440, 689, -1538, 660, -468, 660, -466, 661, -466, 660, -466, 688, -440, 686, -440, 688, -1540, 688, -439, 660, -1568, 659};


const size_t RAW_CODE_LENGTH = sizeof(CODE_OFF) / sizeof(CODE_OFF[0]);

// ======================================================================

// --- Standard Setup and Dump Functions (Restored) ---
void CarrierACClimate::setup() {
  if (this->sensor_) {
    this->sensor_->add_on_state_callback([this](float state) {
      this->current_temperature = state;
      this->publish_state();
    });
    this->current_temperature = this->sensor_->state;
  } else {
    this->current_temperature = NAN;
  }

  auto restore = this->restore_state_();
  if (restore.has_value()) {
    restore->apply(this);
  } else {
    this->mode = climate::CLIMATE_MODE_OFF;
    this->target_temperature = 24;
    this->fan_mode = climate::CLIMATE_FAN_AUTO;
  }
}

void CarrierACClimate::dump_config() {
  ESP_LOGCONFIG(TAG, "Carrier AC Climate Component");
}

// --- Helper function to send the raw code (Restored) ---
void CarrierACClimate::transmit_raw_code_(const int32_t *data, size_t len) {
  if (this->transmitter_ == nullptr) {
    ESP_LOGE(TAG, "Transmitter not set up!");
    return;
  }
  if (len == 0 || data == nullptr) {
      ESP_LOGE(TAG, "Invalid raw code data provided!");
      return;
  }

  std::vector<int32_t> data_vec(data, data + len);
  auto call = this->transmitter_->transmit();
  auto *raw_obj = call.get_data();
  raw_obj->set_carrier_frequency(IR_FREQUENCY);
  raw_obj->set_data(data_vec);
  call.perform();
}

// --- Define component features (Restored) ---
climate::ClimateTraits CarrierACClimate::traits() {
  auto traits = climate::ClimateTraits();
  traits.set_supports_current_temperature(this->sensor_ != nullptr);

  traits.set_supported_modes({
      climate::CLIMATE_MODE_OFF,
      climate::CLIMATE_MODE_COOL,
      climate::CLIMATE_MODE_FAN_ONLY
  });

  traits.set_supported_fan_modes({
      climate::CLIMATE_FAN_LOW,
      climate::CLIMATE_FAN_MEDIUM,
      climate::CLIMATE_FAN_HIGH,
      climate::CLIMATE_FAN_AUTO
  });

  traits.set_visual_min_temperature(22.0f);
  traits.set_visual_max_temperature(27.0f);
  traits.set_visual_temperature_step(1.0f);

  return traits;
}

// --- Main control function (Restored) ---
void CarrierACClimate::control(const climate::ClimateCall &call) {
  if (call.get_mode().has_value())
    this->mode = *call.get_mode();
  if (call.get_target_temperature().has_value())
    this->target_temperature = *call.get_target_temperature();
  if (call.get_fan_mode().has_value())
    this->fan_mode = *call.get_fan_mode();

  this->publish_state();
  this->send_ir_code_(); // Call the function to send the code
}

void CarrierACClimate::send_ir_code_() {
  const int32_t *code_to_send = nullptr;
  size_t code_len = 0;

  // --- 1. Check for OFF state ---
  if (this->mode == climate::CLIMATE_MODE_OFF) {
    ESP_LOGD(TAG, "Sending OFF code");
    code_to_send = CODE_OFF; // Make sure CODE_OFF is defined above!
    // Check if CODE_OFF is actually defined before calculating size
    if (code_to_send != nullptr) {
        code_len = sizeof(CODE_OFF) / sizeof(CODE_OFF[0]);
    }
  }

  // --- 2. Check for FAN ONLY state ---
  else if (this->mode == climate::CLIMATE_MODE_FAN_ONLY) {
    if (!this->fan_mode.has_value()) {
        ESP_LOGW(TAG, "Fan mode not set, cannot send FAN_ONLY command.");
        return;
    }
    ESP_LOGD(TAG, "Sending FAN ONLY code: %s", climate_fan_mode_to_string(this->fan_mode.value()));
    switch (*this->fan_mode) {
      case climate::CLIMATE_FAN_LOW:
        code_to_send = CODE_FAN_LOW; // Make sure this is defined above!
        code_len = sizeof(CODE_FAN_LOW) / sizeof(CODE_FAN_LOW[0]);
        break;
      case climate::CLIMATE_FAN_MEDIUM:
        code_to_send = CODE_FAN_MEDIUM; // Make sure this is defined above!
        code_len = sizeof(CODE_FAN_MEDIUM) / sizeof(CODE_FAN_MEDIUM[0]);
        break;
      case climate::CLIMATE_FAN_HIGH:
      default:
        code_to_send = CODE_FAN_HIGH; // Make sure this is defined above!
        code_len = sizeof(CODE_FAN_HIGH) / sizeof(CODE_FAN_HIGH[0]);
        break;
    }
  }

  // --- 3. Check for COOL state ---
  else if (this->mode == climate::CLIMATE_MODE_COOL) {
    // --- FIX: Remove .has_value() check for target_temperature ---
    if (!this->fan_mode.has_value()) {
        ESP_LOGW(TAG, "Fan mode not set, cannot send COOL command.");
        return;
    }
    // --- FIX: Remove the '*' operator from target_temperature ---
    int temp = (int)roundf(this->target_temperature); // Just use it directly

    ESP_LOGD(TAG, "Sending COOL code: %d°C, Fan: %s", temp, climate_fan_mode_to_string(this->fan_mode.value()));

    switch (temp) {
      case 22:
        switch (*this->fan_mode) { // Still need * for fan_mode
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_22_LOW;    code_len = sizeof(CODE_COOL_22_LOW) / sizeof(CODE_COOL_22_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_22_MEDIUM; code_len = sizeof(CODE_COOL_22_MEDIUM) / sizeof(CODE_COOL_22_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_22_HIGH;   code_len = sizeof(CODE_COOL_22_HIGH) / sizeof(CODE_COOL_22_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_22_AUTO;   code_len = sizeof(CODE_COOL_22_AUTO) / sizeof(CODE_COOL_22_AUTO[0]); break;
        }
        break;

      case 23:
        switch (*this->fan_mode) { // Still need * for fan_mode
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_23_LOW;    code_len = sizeof(CODE_COOL_23_LOW) / sizeof(CODE_COOL_23_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_23_MEDIUM; code_len = sizeof(CODE_COOL_23_MEDIUM) / sizeof(CODE_COOL_23_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_23_HIGH;   code_len = sizeof(CODE_COOL_23_HIGH) / sizeof(CODE_COOL_23_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_23_AUTO;   code_len = sizeof(CODE_COOL_23_AUTO) / sizeof(CODE_COOL_23_AUTO[0]); break;
        }
        break;

      case 24:
        switch (*this->fan_mode) { // Still need * for fan_mode
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_24_LOW;    code_len = sizeof(CODE_COOL_24_LOW) / sizeof(CODE_COOL_24_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_24_MEDIUM; code_len = sizeof(CODE_COOL_24_MEDIUM) / sizeof(CODE_COOL_24_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_24_HIGH;   code_len = sizeof(CODE_COOL_24_HIGH) / sizeof(CODE_COOL_24_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_24_AUTO;   code_len = sizeof(CODE_COOL_24_AUTO) / sizeof(CODE_COOL_24_AUTO[0]); break;
        }
        break;

      case 25:
        switch (*this->fan_mode) { // Still need * for fan_mode
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_25_LOW;    code_len = sizeof(CODE_COOL_25_LOW) / sizeof(CODE_COOL_25_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_25_MEDIUM; code_len = sizeof(CODE_COOL_25_MEDIUM) / sizeof(CODE_COOL_25_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_25_HIGH;   code_len = sizeof(CODE_COOL_25_HIGH) / sizeof(CODE_COOL_25_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_25_AUTO;   code_len = sizeof(CODE_COOL_25_AUTO) / sizeof(CODE_COOL_25_AUTO[0]); break;
        }
        break;

      case 26:
        switch (*this->fan_mode) { // Still need * for fan_mode
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_26_LOW;    code_len = sizeof(CODE_COOL_26_LOW) / sizeof(CODE_COOL_26_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_26_MEDIUM; code_len = sizeof(CODE_COOL_26_MEDIUM) / sizeof(CODE_COOL_26_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_26_HIGH;   code_len = sizeof(CODE_COOL_26_HIGH) / sizeof(CODE_COOL_26_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_26_AUTO;   code_len = sizeof(CODE_COOL_26_AUTO) / sizeof(CODE_COOL_26_AUTO[0]); break;
        }
        break;

      case 27:
        switch (*this->fan_mode) { // Still need * for fan_mode
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_27_LOW;    code_len = sizeof(CODE_COOL_27_LOW) / sizeof(CODE_COOL_27_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_27_MEDIUM; code_len = sizeof(CODE_COOL_27_MEDIUM) / sizeof(CODE_COOL_27_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_27_HIGH;   code_len = sizeof(CODE_COOL_27_HIGH) / sizeof(CODE_COOL_27_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_27_AUTO;   code_len = sizeof(CODE_COOL_27_AUTO) / sizeof(CODE_COOL_27_AUTO[0]); break;
        }
        break;

      default:
        ESP_LOGW(TAG, "Temperature %d°C not supported. Sending 24°C/Auto.", temp);
        code_to_send = CODE_COOL_24_AUTO;
        code_len = sizeof(CODE_COOL_24_AUTO) / sizeof(CODE_COOL_24_AUTO[0]);
        break;
    }
  }

  // --- 4. Transmit the selected code ---
  if (code_to_send != nullptr && code_len > 0) {
    this->transmit_raw_code_(code_to_send, code_len);
  } else {
    ESP_LOGE(TAG, "Could not find a matching IR code for the current state!");
  }
}

}  // namespace carrier_ac
}  // namespace esphome