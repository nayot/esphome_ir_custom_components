#include "carrier_ac.h"
#include "esphome/core/log.h"
#include <vector> // For sending raw codes

namespace esphome {
namespace carrier_ac {

static const char *const TAG = "carrier_ac.climate";

// ======================================================================
// ===                PASTE YOUR "CODE BOOK" HERE                     ===
// ======================================================================
// This is the most important part. You must have all 69+ codes.

const uint32_t IR_FREQUENCY = 38000; // 38kHz. Change if yours is different.


static const int32_t CODE_OFF[] = {9254, -4376, 664, -463, 663, -464, 662, -1565, 664, -462, 691, -435, 663, -464, 663, -463, 663, -465, 665, -461, 662, -1564, 691, -436, 662, -464, 663, -1563, 664, -1563, 664, -464, 663, -463, 663, -463, 663, -464, 688, -438, 663, -465, 666, -459, 662, -465, 663, -463, 663, -464, 663, -465, 662, -463, 690, -437, 662, -464, 663, -463, 663, -464, 689, -437, 691, -435, 639, -489, 664, -461, 691, -438, 662, -463, 663, -463, 663, -465, 662, -464, 661, -466, 662, -1564, 638, -1589, 639, -489, 637, -1590, 662, -1564, 664, -463, 662, -464, 663, -1564, 663, -463, 667, -460, 664, -463, 638, -489, 663, -463, 737, -1490, 667, -1560, 638, -1589, 665, -462, 662, -489, 637, -1565, 688, -1539, 638, -1589, 662, -1565, 662, -466, 636, -1589, 638};
static const int32_t CODE_COOL_15_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_16_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_17_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_18_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_19_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_20_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_21_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_22_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_23_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_24_AUTO[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_25_AUTO[] = {9255, -4376, 663, -464, 663, -463, 664, -1564, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -464, 663, -463, 663, -1564, 663, -464, 663, -463, 663, -1564, 663, -463, 715, -1512, 664, -463, 662, -464, 663, -464, 663, -464, 662, -464, 666, -460, 664, -463, 663, -463, 664, -463, 663, -468, 659, -463, 664, -463, 663, -463, 663, -464, 663, -464, 663, -463, 664, -462, 664, -463, 663, -463, 664, -464, 662, -464, 663, -463, 664, -463, 663, -463, 664, -463, 664, -463, 663, -1562, 665, -1562, 669, -1560, 663, -1564, 663, -463, 663, -463, 664, -1562, 664, -466, 665, -459, 664, -463, 663, -463, 664, -463, 663, -1563, 665, -1565, 662, -1566, 660, -464, 668, -458, 664, -1563, 664, -1563, 664, -1563, 665, -1563, 664, -462, 664, -1564, 663};
static const int32_t CODE_COOL_26_AUTO[] = {9257, -4376, 663, -464, 662, -464, 691, -1534, 665, -463, 692, -1535, 663, -465, 662, -463, 666, -461, 662, -464, 663, -1564, 663, -464, 690, -436, 663, -1563, 664, -464, 662, -1563, 692, -1534, 668, -461, 663, -464, 662, -464, 663, -463, 663, -465, 662, -464, 663, -463, 663, -464, 692, -434, 663, -463, 692, -436, 662, -464, 663, -465, 661, -464, 690, -436, 663, -465, 662, -463, 663, -464, 663, -465, 690, -435, 663, -464, 663, -463, 691, -436, 691, -435, 663, -464, 663, -1564, 663, -1565, 662, -463, 668, -1559, 664, -463, 690, -435, 665, -1563, 663, -464, 663, -463, 691, -436, 663, -462, 664, -462, 665, -1563, 664, -1564, 663, -1562, 665, -464, 691, -435, 663, -1564, 663, -1565, 662, -1563, 667, -1561, 663, -462, 665, -1562, 664};
static const int32_t CODE_COOL_27_AUTO[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_28_AUTO[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_29_AUTO[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_30_AUTO[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_15_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_16_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_17_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_18_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_19_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_20_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_21_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_22_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_23_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_24_LOW[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_25_LOW[] = {9255, -4376, 663, -464, 663, -463, 664, -1564, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -464, 663, -463, 663, -1564, 663, -464, 663, -463, 663, -1564, 663, -463, 715, -1512, 664, -463, 662, -464, 663, -464, 663, -464, 662, -464, 666, -460, 664, -463, 663, -463, 664, -463, 663, -468, 659, -463, 664, -463, 663, -463, 663, -464, 663, -464, 663, -463, 664, -462, 664, -463, 663, -463, 664, -464, 662, -464, 663, -463, 664, -463, 663, -463, 664, -463, 664, -463, 663, -1562, 665, -1562, 669, -1560, 663, -1564, 663, -463, 663, -463, 664, -1562, 664, -466, 665, -459, 664, -463, 663, -463, 664, -463, 663, -1563, 665, -1565, 662, -1566, 660, -464, 668, -458, 664, -1563, 664, -1563, 664, -1563, 665, -1563, 664, -462, 664, -1564, 663};
static const int32_t CODE_COOL_26_LOW[] = {9257, -4376, 663, -464, 662, -464, 691, -1534, 665, -463, 692, -1535, 663, -465, 662, -463, 666, -461, 662, -464, 663, -1564, 663, -464, 690, -436, 663, -1563, 664, -464, 662, -1563, 692, -1534, 668, -461, 663, -464, 662, -464, 663, -463, 663, -465, 662, -464, 663, -463, 663, -464, 692, -434, 663, -463, 692, -436, 662, -464, 663, -465, 661, -464, 690, -436, 663, -465, 662, -463, 663, -464, 663, -465, 690, -435, 663, -464, 663, -463, 691, -436, 691, -435, 663, -464, 663, -1564, 663, -1565, 662, -463, 668, -1559, 664, -463, 690, -435, 665, -1563, 663, -464, 663, -463, 691, -436, 663, -462, 664, -462, 665, -1563, 664, -1564, 663, -1562, 665, -464, 691, -435, 663, -1564, 663, -1565, 662, -1563, 667, -1561, 663, -462, 665, -1562, 664};
static const int32_t CODE_COOL_27_LOW[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_28_LOW[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_29_LOW[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_30_LOW[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_15_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_16_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_17_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_18_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_19_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_20_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_21_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_22_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_23_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_24_MEDIUM[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_25_MEDIUM[] = {9255, -4376, 663, -464, 663, -463, 664, -1564, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -464, 663, -463, 663, -1564, 663, -464, 663, -463, 663, -1564, 663, -463, 715, -1512, 664, -463, 662, -464, 663, -464, 663, -464, 662, -464, 666, -460, 664, -463, 663, -463, 664, -463, 663, -468, 659, -463, 664, -463, 663, -463, 663, -464, 663, -464, 663, -463, 664, -462, 664, -463, 663, -463, 664, -464, 662, -464, 663, -463, 664, -463, 663, -463, 664, -463, 664, -463, 663, -1562, 665, -1562, 669, -1560, 663, -1564, 663, -463, 663, -463, 664, -1562, 664, -466, 665, -459, 664, -463, 663, -463, 664, -463, 663, -1563, 665, -1565, 662, -1566, 660, -464, 668, -458, 664, -1563, 664, -1563, 664, -1563, 665, -1563, 664, -462, 664, -1564, 663};
static const int32_t CODE_COOL_26_MEDIUM[] = {9257, -4376, 663, -464, 662, -464, 691, -1534, 665, -463, 692, -1535, 663, -465, 662, -463, 666, -461, 662, -464, 663, -1564, 663, -464, 690, -436, 663, -1563, 664, -464, 662, -1563, 692, -1534, 668, -461, 663, -464, 662, -464, 663, -463, 663, -465, 662, -464, 663, -463, 663, -464, 692, -434, 663, -463, 692, -436, 662, -464, 663, -465, 661, -464, 690, -436, 663, -465, 662, -463, 663, -464, 663, -465, 690, -435, 663, -464, 663, -463, 691, -436, 691, -435, 663, -464, 663, -1564, 663, -1565, 662, -463, 668, -1559, 664, -463, 690, -435, 665, -1563, 663, -464, 663, -463, 691, -436, 663, -462, 664, -462, 665, -1563, 664, -1564, 663, -1562, 665, -464, 691, -435, 663, -1564, 663, -1565, 662, -1563, 667, -1561, 663, -462, 665, -1562, 664};
static const int32_t CODE_COOL_27_MEDIUM[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_28_MEDIUM[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_29_MEDIUM[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_30_MEDIUM[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_15_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_16_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_17_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_18_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_19_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_20_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_21_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_22_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_23_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_24_HIGH[] = {9256, -4375, 663, -465, 661, -465, 662, -1565, 690, -436, 690, -1536, 663, -465, 690, -436, 663, -463, 662, -465, 690, -1536, 664, -463, 662, -463, 664, -1564, 662, -464, 663, -463, 663, -1565, 689, -437, 662, -462, 691, -437, 690, -437, 663, -462, 643, -486, 688, -440, 659, -464, 690, -437, 687, -439, 691, -435, 663, -464, 663, -463, 691, -437, 662, -464, 689, -437, 689, -437, 691, -435, 663, -466, 636, -489, 665, -460, 668, -459, 638, -489, 689, -437, 663, -1565, 662, -465, 637, -489, 689, -437, 638, -1589, 662, -464, 689, -437, 639, -1588, 663, -463, 639, -488, 638, -489, 661, -464, 663, -465, 638, -1589, 637, -1589, 663, -1565, 689, -437, 638, -488, 662, -1565, 690, -1538, 661, -1565, 637, -1591, 661, -463, 663, -1565, 638};
static const int32_t CODE_COOL_25_HIGH[] = {9255, -4376, 663, -464, 663, -463, 664, -1564, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -464, 663, -463, 663, -1564, 663, -464, 663, -463, 663, -1564, 663, -463, 715, -1512, 664, -463, 662, -464, 663, -464, 663, -464, 662, -464, 666, -460, 664, -463, 663, -463, 664, -463, 663, -468, 659, -463, 664, -463, 663, -463, 663, -464, 663, -464, 663, -463, 664, -462, 664, -463, 663, -463, 664, -464, 662, -464, 663, -463, 664, -463, 663, -463, 664, -463, 664, -463, 663, -1562, 665, -1562, 669, -1560, 663, -1564, 663, -463, 663, -463, 664, -1562, 664, -466, 665, -459, 664, -463, 663, -463, 664, -463, 663, -1563, 665, -1565, 662, -1566, 660, -464, 668, -458, 664, -1563, 664, -1563, 664, -1563, 665, -1563, 664, -462, 664, -1564, 663};
static const int32_t CODE_COOL_26_HIGH[] = {9257, -4376, 663, -464, 662, -464, 691, -1534, 665, -463, 692, -1535, 663, -465, 662, -463, 666, -461, 662, -464, 663, -1564, 663, -464, 690, -436, 663, -1563, 664, -464, 662, -1563, 692, -1534, 668, -461, 663, -464, 662, -464, 663, -463, 663, -465, 662, -464, 663, -463, 663, -464, 692, -434, 663, -463, 692, -436, 662, -464, 663, -465, 661, -464, 690, -436, 663, -465, 662, -463, 663, -464, 663, -465, 690, -435, 663, -464, 663, -463, 691, -436, 691, -435, 663, -464, 663, -1564, 663, -1565, 662, -463, 668, -1559, 664, -463, 690, -435, 665, -1563, 663, -464, 663, -463, 691, -436, 663, -462, 664, -462, 665, -1563, 664, -1564, 663, -1562, 665, -464, 691, -435, 663, -1564, 663, -1565, 662, -1563, 667, -1561, 663, -462, 665, -1562, 664};
static const int32_t CODE_COOL_27_HIGH[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_28_HIGH[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_29_HIGH[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t CODE_COOL_30_HIGH[] = {9260, -4371, 664, -464, 663, -464, 665, -1562, 662, -463, 664, -1563, 664, -464, 663, -463, 663, -463, 689, -438, 663, -1564, 663, -462, 665, -462, 664, -1567, 660, -1563, 663, -463, 665, -461, 664, -463, 691, -435, 664, -463, 664, -465, 665, -459, 664, -462, 664, -463, 690, -436, 665, -462, 664, -462, 665, -462, 664, -463, 663, -464, 663, -463, 665, -461, 664, -462, 692, -436, 663, -462, 665, -462, 664, -463, 664, -463, 691, -435, 692, -434, 692, -435, 664, -463, 691, -1536, 663, -464, 690, -1539, 688, -1537, 663, -464, 663, -464, 663, -1562, 693, -436, 663, -463, 663, -463, 663, -466, 660, -464, 691, -1536, 666, -1561, 664, -1563, 663, -463, 664, -465, 689, -1540, 659, -1564, 663, -1563, 665, -1565, 662, -462, 663, -1565, 663};
static const int32_t FAN_LOW[] = {9260, -4377, 663, -464, 664, -464, 662, -1563, 665, -464, 663, -1564, 664, -465, 662, -464, 663, -464, 663, -464, 663, -465, 662, -1564, 664, -1564, 664, -1564, 664, -464, 666, -461, 663, -1564, 665, -463, 663, -463, 664, -464, 663, -463, 663, -464, 666, -462, 663, -463, 663, -465, 662, -464, 663, -466, 664, -462, 662, -465, 662, -464, 663, -464, 663, -466, 661, -464, 663, -464, 663, -464, 663, -464, 663, -464, 663, -464, 663, -464, 663, -464, 663, -463, 664, -1563, 665, -463, 664, -463, 663, -1564, 664, -1568, 660, -464, 663, -463, 664, -1564, 664, -463, 664, -463, 663, -463, 664, -466, 661, -464, 663, -464, 663, -463, 664, -464, 663, -464, 663, -464, 666, -1562, 663, -1564, 664, -464, 663, -1564, 664, -465, 666, -459, 664};
static const int32_t FAN_MEDIUM[] = {9259, -4377, 664, -464, 663, -465, 690, -1535, 693, -436, 694, -1533, 664, -464, 691, -436, 691, -436, 662, -464, 663, -465, 690, -1536, 664, -464, 663, -1563, 691, -438, 663, -464, 690, -1537, 663, -466, 661, -464, 665, -462, 663, -464, 692, -435, 662, -465, 691, -438, 689, -436, 662, -465, 662, -465, 662, -465, 662, -467, 688, -437, 663, -463, 692, -435, 663, -465, 690, -439, 688, -436, 691, -436, 663, -464, 662, -466, 690, -437, 662, -464, 691, -436, 690, -1536, 664, -465, 662, -1565, 691, -437, 689, -1537, 692, -436, 662, -464, 695, -1532, 692, -436, 662, -465, 690, -437, 662, -464, 691, -436, 690, -437, 663, -465, 690, -1536, 693, -435, 663, -464, 694, -1532, 693, -1537, 690, -436, 663, -464, 663, -1565, 691, -1538, 693};
static const int32_t FAN_HIGH[] = {9259, -4377, 665, -464, 663, -467, 659, -1563, 771, -358, 663, -1564, 664, -464, 663, -464, 663, -464, 689, -438, 662, -465, 662, -465, 637, -1588, 665, -1565, 664, -464, 662, -465, 690, -1537, 663, -465, 663, -463, 664, -454, 701, -435, 663, -466, 661, -465, 662, -465, 663, -463, 663, -464, 663, -464, 663, -464, 663, -464, 663, -464, 664, -463, 663, -464, 662, -465, 663, -464, 662, -468, 659, -464, 663, -464, 663, -465, 662, -464, 663, -465, 662, -464, 663, -1564, 664, -463, 664, -1564, 663, -1564, 664, -1565, 663, -465, 662, -464, 664, -1564, 663, -464, 664, -463, 663, -466, 661, -464, 663, -463, 664, -464, 663, -1567, 661, -464, 663, -464, 663, -465, 662, -1565, 663, -1564, 663, -464, 664, -464, 784, -1442, 664, -463, 666};

// ======================================================================

// --- Standard Setup and Dump Functions ---
void CarrierACClimate::setup() {
  ESP_LOGD(TAG, "Carrier AC component is ready.");
  
  // Set up a callback to read the temperature from the sensor
  if (this->sensor_) {
    this->sensor_->add_on_state_callback([this](float state) {
      // This is called when the sensor updates.
      // We publish the new "current_temperature" to Home Assistant
      this->current_temperature = state;
      this->publish_state(); 
    });
    // Set initial temperature
    this->current_temperature = this->sensor_->state;
  } else {
    // No sensor, so we can't report current temperature
    this->current_temperature = NAN;
  }
  
  // Restore state from flash (or set defaults)
  auto restore = this->restore_state_();
  if (restore.has_value()) {
    restore->apply(this);
  } else {
    // No saved state, set defaults
    this->mode = climate::CLIMATE_MODE_OFF;
    this->target_temperature = 24; // Default temp
    this->fan_mode = climate::CLIMATE_FAN_AUTO;
  }
}

void CarrierACClimate::dump_config() {
  ESP_LOGCONFIG(TAG, "Carrier AC Climate Component");
}

// --- Helper function to send the raw code ---
// (This is the same as our 'light' example)
void CarrierACClimate::transmit_raw_code_(const int32_t *data, size_t len) {
  if (this->transmitter_ == nullptr) {
    ESP_LOGE(TAG, "Transmitter not set up!");
    return;
  }
  
  std::vector<int32_t> data_vec(data, data + len);
  auto call = this->transmitter_->transmit();
  auto *raw_obj = call.get_data();
  raw_obj->set_carrier_frequency(IR_FREQUENCY);
  raw_obj->set_data(data_vec);
  call.perform();
}

// --- This function defines our component's features ---
climate::ClimateTraits CarrierACClimate::traits() {
  auto traits = climate::ClimateTraits();
  
  // We MUST support current temperature
  //traits.set_supports_current_temperature(true);
  traits.set_supports_current_temperature(this->sensor_ != nullptr);
  
  // Set our supported modes
  traits.set_supported_modes({
      climate::CLIMATE_MODE_OFF,
      climate::CLIMATE_MODE_COOL,
      climate::CLIMATE_MODE_FAN_ONLY
  });

  // Set our supported fan modes
  traits.set_supported_fan_modes({
      climate::CLIMATE_FAN_LOW,
      climate::CLIMATE_FAN_MEDIUM,
      climate::CLIMATE_FAN_HIGH,
  });
  
  // Set our temperature range
  traits.set_visual_min_temperature(15.0f);
  traits.set_visual_max_temperature(30.0f);
  traits.set_visual_temperature_step(1.0f);
  
  return traits;
}

// --- This is the MAIN control function ---
void CarrierACClimate::control(const climate::ClimateCall &call) {
  // Update our internal state from the "call"
  if (call.get_mode().has_value())
    this->mode = *call.get_mode();
  if (call.get_target_temperature().has_value())
    this->target_temperature = *call.get_target_temperature();
  if (call.get_fan_mode().has_value())
    this->fan_mode = *call.get_fan_mode();

  // Send the new state to Home Assistant's UI
  this->publish_state();

  // Now, send the matching IR code
  this->send_ir_code_();
}

// --- This is our "Code Lookup" function ---
void CarrierACClimate::send_ir_code_() {
  const int32_t *code_to_send = nullptr;
  size_t code_len = 0;

  // --- 1. Check for OFF state ---
  if (this->mode == climate::CLIMATE_MODE_OFF) {
    ESP_LOGD(TAG, "Sending OFF code");
    code_to_send = CODE_OFF;
    code_len = sizeof(CODE_OFF) / sizeof(CODE_OFF[0]);
  }
  
  // --- 2. Check for FAN ONLY state ---
  else if (this->mode == climate::CLIMATE_MODE_FAN_ONLY) {
    ESP_LOGD(TAG, "Sending FAN ONLY code: %s", LOG_STR(climate::fan_mode_to_string(this->fan_mode)));
    switch (this->fan_mode) {
      case climate::CLIMATE_FAN_LOW:
        code_to_send = CODE_FAN_LOW;
        code_len = sizeof(CODE_FAN_LOW) / sizeof(CODE_FAN_LOW[0]);
        break;
      case climate::CLIMATE_FAN_MEDIUM:
        code_to_send = CODE_FAN_MEDIUM;
        code_len = sizeof(CODE_FAN_MEDIUM) / sizeof(CODE_FAN_MEDIUM[0]);
        break;
      case climate::CLIMATE_FAN_HIGH:
      default:
        code_to_send = CODE_FAN_HIGH;
        code_len = sizeof(CODE_FAN_HIGH) / sizeof(CODE_FAN_HIGH[0]);
        break;
    }
  }

  // --- 3. Check for COOL state ---
  else if (this->mode == climate::CLIMATE_MODE_COOL) {
    int temp = (int)roundf(this->target_temperature);
    ESP_LOGD(TAG, "Sending COOL code: %d°C, Fan: %s", temp, LOG_STR(climate::fan_mode_to_string(this->fan_mode)));
    
    // This is the "Big Lookup Table"
    switch (temp) {
      case 15:
        switch (this->fan_mode) {
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_15_LOW;    code_len = sizeof(CODE_COOL_15_LOW) / sizeof(CODE_COOL_15_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_15_MEDIUM; code_len = sizeof(CODE_COOL_15_MEDIUM) / sizeof(CODE_COOL_15_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_15_HIGH;   code_len = sizeof(CODE_COOL_15_HIGH) / sizeof(CODE_COOL_15_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_15_AUTO;   code_len = sizeof(CODE_COOL_15_AUTO) / sizeof(CODE_COOL_15_AUTO[0]); break;
        }
        break;
      
      case 16:
        switch (this->fan_mode) {
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_16_LOW;    code_len = sizeof(CODE_COOL_16_LOW) / sizeof(CODE_COOL_16_LOW[0]); break;
          // ... (fill in MEDIUM, HIGH, AUTO) ...
          default:                          code_to_send = CODE_COOL_16_AUTO;   code_len = sizeof(CODE_COOL_16_AUTO) / sizeof(CODE_COOL_16_AUTO[0]); break;
        }
        break;

      // ... (repeat for cases 17 through 29) ...

      case 30:
        switch (this->fan_mode) {
          case climate::CLIMATE_FAN_LOW:    code_to_send = CODE_COOL_30_LOW;    code_len = sizeof(CODE_COOL_30_LOW) / sizeof(CODE_COOL_30_LOW[0]); break;
          case climate::CLIMATE_FAN_MEDIUM: code_to_send = CODE_COOL_30_MEDIUM; code_len = sizeof(CODE_COOL_30_MEDIUM) / sizeof(CODE_COOL_30_MEDIUM[0]); break;
          case climate::CLIMATE_FAN_HIGH:   code_to_send = CODE_COOL_30_HIGH;   code_len = sizeof(CODE_COOL_30_HIGH) / sizeof(CODE_COOL_30_HIGH[0]); break;
          default:                          code_to_send = CODE_COOL_30_HIGH;   code_len = sizeof(CODE_COOL_30_AUTO) / sizeof(CODE_COOL_30_AUTO[0]); break;
        }
        break;
        
      default:
        ESP_LOGW(TAG, "Temperature %d°C not supported. Sending 24°C/Auto.", temp);
        code_to_send = CODE_COOL_24_AUTO; // Make sure you define this one!
        code_len = sizeof(CODE_COOL_24_AUTO) / sizeof(CODE_COOL_24_AUTO[0]);
        break;
    }
  }

  // --- 4. Transmit the selected code ---
  if (code_to_send != nullptr) {
    this->transmit_raw_code_(code_to_send, code_len);
  } else {
    ESP_LOGE(TAG, "Could not find a matching IR code for the current state!");
  }
}

}  // namespace carrier_ac
}  // namespace esphome